To implement the hourly PKT release functionality in Power Apps, including handling different time zones, here’s a step-by-step approach with the necessary logic and recommendations:


---

1. Design Overview

Objective: Provide the flexibility to release quizzes on an hourly basis with user-friendly selection (hour and minute) and ensure consistent notifications across time zones.

Key Features:

Toggle between daily and hourly quiz releases.

Time picker with hourly and 5-minute intervals.

Handle time zone conversions to ensure synchronized releases.

Store release times and active quiz windows in a SharePoint list.

Use UTC as the standard time in backend operations and adjust it based on user time zones (e.g., IST, EST).




---

2. Step-by-Step Solution

A. UI Design – Hourly Release Setup in Power Apps

1. Create a Toggle Control

Add a toggle control labeled Release Hourly?.

When the toggle is On, the time picker should become visible.



2. Time Picker Setup with Dropdowns

Add two dropdown controls:
Dropdown for Hours

Items: { 0, 1, 2, ..., 23 } (24-hour format).


Dropdown for Minutes (in 5-minute intervals)

Items: { 0, 5, 10, 15, ..., 55 }.




3. Show Time Picker on Toggle

Use this formula in the Visible property of the time picker controls:

Toggle_Hourly.Value



4. Capture Selected Time

Use a button labeled Set Release Time.

On the button's OnSelect property:

Set(varReleaseHour, Dropdown_Hours.Selected.Value);
Set(varReleaseMinute, Dropdown_Minutes.Selected.Value);
Set(varReleaseTime, DateAdd(Today(), varReleaseHour, Hours) + Time(0, varReleaseMinute, 0));

This stores the selected release time as a UTC DateTime in the variable varReleaseTime.





---

B. Backend Logic – SharePoint List Setup

1. Create a SharePoint List to store quiz releases:

List Name: PKTReleaseDetails

Columns:

ReleaseID: Auto-generated ID.

ReleaseTimeUTC: DateTime (store the varReleaseTime in UTC).

QuizID: Lookup column referencing the quiz.

ActiveWindow: Numeric (duration in minutes, e.g., 45, 60).

TimeZoneOffset: Numeric (for user time zone differences, e.g., -5 for EST, +5.5 for IST).






---

C. Logic for Managing Time Zones

1. Get User’s Time Zone Offset
Use the Power Apps Text() function to get the user's offset from UTC:

Set(varUserTimeZoneOffset, Value(Text(Now(), "Z")) / 100);

This stores the user's time zone difference in varUserTimeZoneOffset.


2. Convert Release Time to Local Time

When displaying quizzes, convert the stored UTC time to the user’s local time:

Set(varLocalReleaseTime, DateAdd(varReleaseTime, varUserTimeZoneOffset, Hours));



3. Set Quiz Active Window Logic

Use a timer or collection to manage quiz visibility based on the release window.

Example logic to check if a quiz is active:

If(Now() >= varLocalReleaseTime && 
   Now() <= DateAdd(varLocalReleaseTime, ActiveWindow, Minutes), 
   true, 
   false
)





---

D. Handling Multiple Time Zones and Notifications

1. Convert UTC to Multiple Time Zones Dynamically

When a quiz is released, store its release time in UTC.

For each user, calculate their respective local time using:

Set(varUserLocalTime, DateAdd(varReleaseTime, varUserTimeZoneOffset, Hours));



2. Real-Time Notifications across Time Zones

Use Power Automate to send notifications at the release time.

Create a flow that:

Triggers on quiz release.

For each user, converts the UTC time to their local time.

Sends a notification through email or Power Apps push notifications.






---

E. Power Automate Flow for Real-Time Notifications

1. Create a Flow Triggered on New Release

Trigger: When an item is created in the PKTReleaseDetails list.

Actions:

Get User Profiles to retrieve user details and time zones.

Apply to Each User:

Convert release time to the user's local time.

Send an email or push notification with the quiz details.







---

F. Testing and Troubleshooting

1. Test with Multiple Time Zones

Create test user accounts in different time zones (e.g., IST, EST).

Verify that each user receives notifications at the correct local time.



2. Handle Daylight Savings Time (DST)

Use a service like Microsoft Time Zone API in Power Automate to account for DST adjustments dynamically.





---

3. Summary and Recommendations

UI Setup: Toggle to switch between daily/hourly release and a time picker with hour and minute dropdowns.

Backend Logic: Store release times in UTC and adjust based on the user’s time zone.

Real-Time Notifications: Use Power Automate to manage notifications.

Testing: Validate across multiple time zones, including DST handling.


This approach ensures a robust, user-friendly solution that handles hourly releases efficiently and provides a seamless experience across time zones.



Introduction

Thank you for the clarification. Since you're using Microsoft Power Apps to develop your application, I'll provide a detailed approach on how to implement the hourly PKT release functionality within the Power Apps environment. This will include creating the user interface components, handling time zone considerations, and updating the backend logic to release quizzes based on the selected time.


---

1. Update the User Interface in Power Apps

a. Add a Toggle for Hourly Release

Control: Use a Toggle control or Radio Buttons to switch between Daily and Hourly modes.


Implementation Steps:

1. Insert a Toggle Control:

Go to the Insert tab > Controls > Toggle.

Set the Default property to false (for Daily).



2. Label the Toggle:

Place a Label next to the toggle control with text "Hourly Release".



3. Use Radio Buttons (Alternative):

Insert a Radio control with options ["Daily", "Hourly"].




b. Implement the Time Picker Pop-up

Since Power Apps doesn't have a native time picker with 5-minute intervals, we'll create custom Dropdown controls for hours and minutes.


Implementation Steps:

1. Create a Pop-up Container:

Insert a Rectangle or Container control to act as the pop-up background.

Set its Visible property to ToggleHourly.Value (or the selected value of your toggle/radio control).



2. Hour Dropdown:

Insert a Dropdown control for hours.

Items property: ForAll([0,1,2,...,23], {Value: Text(Value)}) (for 24-hour format).

Alternatively, use Sequence(24, 0, 1) to generate numbers from 0 to 23.



3. Minute Dropdown:

Insert another Dropdown control for minutes.

Items property: ForAll([0,5,10,15,20,25,30,35,40,45,50,55], {Value: Text(Value, "00")}).



4. Time Zone Display:

Insert a Label to display the current time zone.

Use TimeZoneOffset() function to get the user's time zone offset.

Note: Power Apps doesn't directly support time zones, so we'll handle this separately.




c. UI Behavior

Show/Hide Time Picker:

Set the Visible property of the time picker controls to ToggleHourly.Value.


Collecting Time Input:

Store the selected hour and minute in variables or use them directly in your formulas.




---

2. Handle Time Zones in Power Apps

Handling time zones in Power Apps can be challenging due to limited built-in support. However, we can work around this by:

a. Capturing User's Time Zone

Use the TimeZoneOffset() function, which returns the difference between the user's local time and UTC in minutes.


Implementation Steps:

1. Calculate User's UTC Offset:

Create a variable to store the offset: Set(varUserUTCOffset, TimeZoneOffset()).



2. Adjust Time Based on Offset:

When storing or comparing times, adjust them using the offset.




b. Convert Selected Time to UTC

When the admin selects a time, convert it to UTC before storing.


Implementation Steps:

1. Combine Date and Time:

Assume the date is today or select a date if necessary.

Use DateTimeValue() to combine date and time.



2. Adjust for Time Zone:

Subtract the user's UTC offset: DateAdd(selectedDateTime, -varUserUTCOffset, Minutes).



3. Store the UTC Time:

Save this adjusted time to your data source.




c. Store Time Zone Information (Optional)

If you need to support multiple time zones for admins, allow them to select their time zone from a list and adjust accordingly.



---

3. Update the Backend Logic

In Power Apps, backend operations can be managed through connectors like Power Automate (for flows) and data sources like SharePoint, Dataverse, or SQL Server.

a. Modify Data Source Schema

Add Fields:

ReleaseTimeUTC (DateTime): To store the release time in UTC.

IsReleased (Boolean): To indicate if the quiz is released.



b. Save Release Time

When the admin saves the quiz:

Patch(
  Quizzes,
  Defaults(Quizzes),
  {
    Title: txtQuizTitle.Text,
    ReleaseTimeUTC: DateAdd(
      DateTimeValue(txtSelectedDate.Text & " " & drpHour.Selected.Value & ":" & drpMinute.Selected.Value),
      -varUserUTCOffset,
      Minutes
    ),
    IsReleased: false
  }
)


c. Implement Release Scheduling with Power Automate

Since Power Apps doesn't have background jobs, we'll use Power Automate to check and release quizzes.

Implementation Steps:

1. Create a Scheduled Flow in Power Automate:

Trigger: Recurs every 5 minutes.



2. Add Actions:

Get Items (from your data source) where:

IsReleased is false.

ReleaseTimeUTC is less than or equal to utcNow().




3. Loop Through Quizzes:

For each quiz that meets the criteria:

Update IsReleased to true.




4. Example Flow Outline:

Trigger: Schedule - Recurrence (Every 5 minutes)

Action: Get items from Quizzes where IsReleased = false and ReleaseTimeUTC <= utcNow()

Apply to Each:

Action: Update Item - Set IsReleased to true






---

4. Display Quizzes to Users

a. Filter Available Quizzes

In your gallery or list displaying quizzes to users, filter based on IsReleased.

Filter(Quizzes, IsReleased = true)


b. Handle Time Conversion for Users

To display release times in the user's local time:

DateAdd(ThisItem.ReleaseTimeUTC, varUserUTCOffset, Minutes)

This adjusts the UTC time to the user's local time.


c. Prevent Early Access

Ensure that users cannot access quizzes where IsReleased is false.



---

5. Implement the Time Picker Functionality in Power Apps

a. Populate Hour and Minute Dropdowns

Hour Dropdown:

Items property:

ForAll(Sequence(24, 0, 1), {Value: Text(Value - 1, "00")})

This creates numbers from 0 to 23.


Minute Dropdown:

Items property:

ForAll([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55], {Value: Text(Value, "00")})


b. Combine Date and Time Inputs

If you have a date picker for the date, combine it with the time selections.

Set(
  selectedDateTime,
  DateTimeValue(
    DateValue(datePicker.SelectedDate) & " " & drpHour.Selected.Value & ":" & drpMinute.Selected.Value
  )
)



---

6. Handling Time Zones More Robustly

Since Power Apps has limitations with time zones, consider the following:

a. Use a Time Zone Conversion Service

Option: Use a custom connector or call an API (e.g., Azure Functions) to convert times between time zones.


b. Store Time Zone Information

For Admins:

Add a dropdown for the admin to select their time zone.

Use this to adjust the release time to UTC.


For Users:

If you have user profiles, store their time zones.

Adjust displayed times based on the user's time zone.



c. Time Zone Offset Table (Alternative)

Create a collection or data source mapping time zones to their offsets.

Use this to adjust times accordingly.



---

7. Testing and Validation in Power Apps

a. Test Time Conversion

Verify that when you select a time, it correctly converts to UTC and back.


b. Simulate Different User Time Zones

Manually change the varUserUTCOffset to simulate users in different time zones.


c. Test Power Automate Flow

Ensure the flow correctly updates the IsReleased field at the appropriate times.



---

8. Additional Considerations

a. User Experience

Loading Indicators: Show a message if there are no available quizzes yet.

Error Handling: Provide feedback if there's an issue with the time selection.


b. Notifications

Use Power Automate to send email notifications to users when a quiz is released.


c. Security

Ensure that users cannot bypass the IsReleased check to access unreleased quizzes.



---

9. Sample Implementation Code

Power Apps Formulas

Setting User's UTC Offset:

OnStart = Set(varUserUTCOffset, TimeZoneOffset())

Adjusting Release Time to UTC:

Set(
  selectedDateTimeUTC,
  DateAdd(
    DateTimeValue(
      DateValue(datePicker.SelectedDate) & " " & drpHour.Selected.Value & ":" & drpMinute.Selected.Value
    ),
    -varUserUTCOffset,
    Minutes
  )
)

Storing Release Time:

Patch(
  Quizzes,
  Defaults(Quizzes),
  {
    Title: txtQuizTitle.Text,
    ReleaseTimeUTC: selectedDateTimeUTC,
    IsReleased: false
  }
)

Displaying Release Time to Users:

Text(
  DateAdd(ThisItem.ReleaseTimeUTC, varUserUTCOffset, Minutes),
  "dd/mm/yyyy hh:mm"
)


---

10. Limitations and Workarounds

a. Limitations in Power Apps

Time Zone Support: Limited functions for time zone conversion.

Background Processes: Cannot run background jobs directly in Power Apps.


b. Workarounds

Use Power Automate: For scheduling and background tasks.

Custom Connectors: If needed, create custom connectors to external services for advanced time zone handling.



---

Conclusion

By following this approach within Power Apps and Power Automate, you can implement the functionality to release PKT quizzes on an hourly basis with 5-minute intervals. Handling time zones carefully ensures that both admins and users experience the correct timings based on their locations.

Remember to thoroughly test the application to account for different time zones and ensure that the time conversions are accurate. If you encounter any limitations within Power Apps, consider using additional services like Power Automate or custom APIs to extend functionality.


---

If you have any questions or need further assistance with specific implementation details in Power Apps, feel free to ask!




To handle quiz releases simultaneously across multiple time zones in PowerApps, you'll need to use UTC time and dynamically calculate the offset for each user’s time zone. Here's a detailed step-by-step approach to solve your issue using a combination of PowerApps variables, user time zone offsets, and UTC-based logic:


---

Solution Overview

1. Store Dates in UTC:
Always store Release Date and End Date in UTC in your SharePoint list.


2. User-Specific Offset Calculation:
Use the user's device time to calculate the offset from UTC.


3. Synchronize Release Logic:
Create logic to compare the release window based on user-specific adjusted time.


4. Show/Hide the Assessment Button:
Display the button only if the current user’s local time falls within the active release window.




---

Implementation Steps in PowerApps

Step 1: Capture Dates in UTC

When using the DatePicker, ensure you are always converting the selected date to UTC before storing it in your SharePoint list. PowerApps works internally with UTC.

// Assuming DatePicker1.SelectedDate is the picked date
Set(varReleaseDateUTC, DateAdd(DatePicker1.SelectedDate, -TimeZoneOffset(), Minutes))

This will ensure that the date you store in varReleaseDateUTC is in UTC, no matter the user's local time zone.


---

Step 2: Calculate User's Time Zone Offset

Use the TimeZoneOffset() function in PowerApps to calculate the user’s offset from UTC in minutes. Store this in a local variable.

// Get the user's UTC offset
Set(varUserOffsetMinutes, TimeZoneOffset())


---

Step 3: Adjust Release Date Using User’s Offset

When you load the release and end dates from SharePoint (stored in UTC), adjust them based on the user’s local offset.

// Adjust the UTC release date to the user's local time
Set(varUserLocalReleaseDate, DateAdd(varReleaseDateUTC, varUserOffsetMinutes, Minutes));
Set(varUserLocalEndDate, DateAdd(varEndDateUTC, varUserOffsetMinutes, Minutes));

This adjustment ensures that the release logic is evaluated correctly for the user’s local time zone.


---

Step 4: Create the Release Logic

Now, build logic to show or hide the assessment button based on the user's local adjusted release window.

If(
    Now() >= varUserLocalReleaseDate &&
    Now() <= varUserLocalEndDate,
    Set(varShowAssessmentButton, true),
    Set(varShowAssessmentButton, false)
)


---

Step 5: Display the Assessment Button Conditionally

Use the DisplayMode property of the assessment button to control its visibility.

If(varShowAssessmentButton, DisplayMode.Edit, DisplayMode.Disabled)


---

Summary of Workflow

1. Store release dates in UTC in the SharePoint list.


2. Calculate the user's UTC offset using TimeZoneOffset().


3. Adjust the release and end dates to the user's local time zone.


4. Show the assessment button based on the user's local time being within the release window.




---

This approach ensures that the release logic works correctly, regardless of the users' time zones. Let me know if you need further clarification or adjustments!



To ensure you capture the current date and time using the DatePicker in PowerApps, you’ll need to adjust your logic. The DatePicker control only captures the date part, defaulting the time to 12:00 AM, which is causing the issue.

Here's a detailed solution to capture both current date and time accurately and use it in your logic.


---

Solution to Capture Current Date and Time

Approach 1: Using Now() for Current Date and Time

Instead of relying solely on the DatePicker, use the Now() function, which returns the current date and time in UTC.

// Set current UTC date and time
Set(varCurrentUTCDateTime, Now())

Now() will capture both date and time at the moment of execution.

This avoids the default 12:00 AM issue caused by the DatePicker.



---

Approach 2: Storing User Input with Current Time Adjustment

1. Use the DatePicker to capture the date.


2. Use Now() to get the current time and combine the two into a single timestamp.



Code Example: Merging Date and Current Time

// Get the selected date from the DatePicker
Set(varSelectedDate, DatePicker1.SelectedDate);

// Get the current time (hours and minutes)
Set(varCurrentTime, Text(Now(), "[$-en-US]hh:mm:ss"));

// Combine date and current time into a single value
Set(
    varFinalDateTime,
    DateValue(Text(varSelectedDate) & " " & varCurrentTime)
);

This will create a timestamp that contains both the selected date and the current time when the action occurs.


---

Approach 3: Adjusting for Time Zone Differences

Since Now() returns the UTC time, you need to adjust it to the user’s local time. Use the TimeZoneOffset() function to get the user’s offset and adjust the time accordingly.

Code Example: Adjusting for Time Zones

// Get the current UTC date and time
Set(varCurrentUTCDateTime, Now());

// Adjust for the user’s local time zone offset
Set(
    varUserLocalDateTime,
    DateAdd(varCurrentUTCDateTime, TimeZoneOffset(), Minutes)
);


---

Using the Captured Date-Time in Your Logic

With varFinalDateTime or varUserLocalDateTime available, you can now use it to determine the release window in your PowerApps logic:

If(
    varUserLocalDateTime >= varUserLocalReleaseDate &&
    varUserLocalDateTime <= varUserLocalEndDate,
    Set(varShowAssessmentButton, true),
    Set(varShowAssessmentButton, false)
)


---

Summary

Use Now() to capture both current date and time.

Combine the selected date and current time for precise timestamps.

Adjust for time zones using TimeZoneOffset() for consistent behavior across users.


This approach ensures that the quiz release logic works correctly based on the user’s local date and time without issues caused by the DatePicker's default 12:00 AM behavior.








