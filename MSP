

It looks like your MS Access SQL query has some formatting and syntax issues that need correction before we can convert it to IBM DB2 SQL.


---

Issues in the Query

1. Syntax Errors and Typos:

Some column and table names are incorrectly formatted (e.g., RIMTHAΑΣ, RIMTΗΑΣ).

10 appears in the SELECT clause without an alias.

CONTRACT ID-RIMTHAL ASSET.CONTRACT (0) is incorrectly written.

Missing aliases and incorrect brackets/parentheses.



2. INTO (Dorrie A Asset FROM Issue:

In MS Access, SELECT INTO is used for creating a new table.

In DB2, INSERT INTO should be used instead.



3. Joins Need Correction:

The join conditions are not properly formatted.



4. WHERE Clause Issues:

WHERE RIMTHAI CONTRACT.CONTRACT STATUS)-"A") is incorrect.

Correct format: WHERE RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A' (DB2 uses = instead of -).





---

Corrected MS Access SQL

If the goal is to create a new table

SELECT 
    RIMTHAI_ASSET.CUSTOMER_NBR, 
    RIMTHAI_ASSET.CONTRACT_ID, 
    RIMTHAI_ASSET.ASSET_NBR, 
    RIMTHAI_COMPANY.COMPANY_NM, 
    RIMTHAI_COMPANY.COMP_OWN_CD, 
    RIMTHAI_CONTRACT.ACCT_PLAN_ID, 
    RIMTHAI_CONTRACT.CONTRACT_BAL, 
    RIMTHAI_CONTRACT.TOTAL_RENT, 
    RIMTHAI_COMPANY.COST_CENTER_CD, 
    RIMTHAI_CONTRACT.BRANCH_CO_NBR
INTO Dorrie_A_Asset  -- Creates a new table in MS Access
FROM 
    (RIMTHAI_CONTRACT 
    INNER JOIN RIMTHAI_COMPANY 
    ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR) 
    INNER JOIN RIMTHAI_ASSET 
    ON (RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID 
    AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR)
WHERE 
    RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A' 
    AND RIMTHAI_ASSET.ASSET_STATUS = 'A'
GROUP BY 
    RIMTHAI_ASSET.CUSTOMER_NBR, 
    RIMTHAI_ASSET.CONTRACT_ID, 
    RIMTHAI_ASSET.ASSET_NBR, 
    RIMTHAI_COMPANY.COMPANY_NM, 
    RIMTHAI_COMPANY.COMP_OWN_CD, 
    RIMTHAI_CONTRACT.ACCT_PLAN_ID, 
    RIMTHAI_CONTRACT.CONTRACT_BAL, 
    RIMTHAI_CONTRACT.TOTAL_RENT, 
    RIMTHAI_COMPANY.COST_CENTER_CD, 
    RIMTHAI_CONTRACT.BRANCH_CO_NBR;


---

DB2 Equivalent Query

If the goal is to insert data into an existing table

INSERT INTO Dorrie_A_Asset ( 
    CUSTOMER_NBR, CONTRACT_ID, ASSET_NBR, COMPANY_NM, COMP_OWN_CD, 
    ACCT_PLAN_ID, CONTRACT_BAL, TOTAL_RENT, COST_CENTER_CD, BRANCH_CO_NBR
)
SELECT 
    RIMTHAI_ASSET.CUSTOMER_NBR, 
    RIMTHAI_ASSET.CONTRACT_ID, 
    RIMTHAI_ASSET.ASSET_NBR, 
    RIMTHAI_COMPANY.COMPANY_NM, 
    RIMTHAI_COMPANY.COMP_OWN_CD, 
    RIMTHAI_CONTRACT.ACCT_PLAN_ID, 
    RIMTHAI_CONTRACT.CONTRACT_BAL, 
    RIMTHAI_CONTRACT.TOTAL_RENT, 
    RIMTHAI_COMPANY.COST_CENTER_CD, 
    RIMTHAI_CONTRACT.BRANCH_CO_NBR
FROM 
    RIMTHAI_CONTRACT 
    INNER JOIN RIMTHAI_COMPANY 
    ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
    INNER JOIN RIMTHAI_ASSET 
    ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID 
    AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
WHERE 
    RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A' 
    AND RIMTHAI_ASSET.ASSET_STATUS = 'A';


---

Key Differences in DB2 Version

1. INSERT INTO Instead of SELECT INTO

MS Access: SELECT ... INTO table_name

DB2: Use INSERT INTO table_name SELECT ...



2. Joins Format

MS Access requires extra parentheses in multi-table joins.

DB2 follows ANSI SQL and does not require parentheses.



3. Data Type Handling

MS Access: Uses TEXT, MEMO, YES/NO for text and boolean values.

DB2: Uses VARCHAR, CLOB, and BOOLEAN or SMALLINT.



4. String Literals in WHERE Clause

MS Access: Uses double quotes ("A")

DB2: Uses single quotes ('A')





---

Final Steps for Migration

1. Verify Column Names

Ensure that the column names match exactly in DB2.

Example: CUSTOMER_NBR vs. CUSTOMER_NBR_ (check for unintended underscores or typos).


2. Create Table in DB2 (if it doesn't exist)

CREATE TABLE Dorrie_A_Asset (
    CUSTOMER_NBR VARCHAR(20),
    CONTRACT_ID VARCHAR(20),
    ASSET_NBR VARCHAR(20),
    COMPANY_NM VARCHAR(100),
    COMP_OWN_CD VARCHAR(10),
    ACCT_PLAN_ID VARCHAR(20),
    CONTRACT_BAL DECIMAL(15,2),
    TOTAL_RENT DECIMAL(15,2),
    COST_CENTER_CD VARCHAR(20),
    BRANCH_CO_NBR VARCHAR(20)
);

3. Execute Query in Python Using pyodbc

import pyodbc

conn = pyodbc.connect("DSN=mydsn;UID=user;PWD=password")
cursor = conn.cursor()

insert_query = """
INSERT INTO Dorrie_A_Asset (CUSTOMER_NBR, CONTRACT_ID, ASSET_NBR, COMPANY_NM, COMP_OWN_CD, 
    ACCT_PLAN_ID, CONTRACT_BAL, TOTAL_RENT, COST_CENTER_CD, BRANCH_CO_NBR)
SELECT 
    RIMTHAI_ASSET.CUSTOMER_NBR, 
    RIMTHAI_ASSET.CONTRACT_ID, 
    RIMTHAI_ASSET.ASSET_NBR, 
    RIMTHAI_COMPANY.COMPANY_NM, 
    RIMTHAI_COMPANY.COMP_OWN_CD, 
    RIMTHAI_CONTRACT.ACCT_PLAN_ID, 
    RIMTHAI_CONTRACT.CONTRACT_BAL, 
    RIMTHAI_CONTRACT.TOTAL_RENT, 
    RIMTHAI_COMPANY.COST_CENTER_CD, 
    RIMTHAI_CONTRACT.BRANCH_CO_NBR
FROM RIMTHAI_CONTRACT 
INNER JOIN RIMTHAI_COMPANY ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
INNER JOIN RIMTHAI_ASSET 
    ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID 
    AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
WHERE RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A' 
    AND RIMTHAI_ASSET.ASSET_STATUS = 'A';
"""

cursor.execute(insert_query)
conn.commit()
conn.close()


---

Summary

Fixed syntax errors in MS Access query.

Converted the query to DB2 SQL (ANSI SQL standard).

Used INSERT INTO instead of SELECT INTO.

Provided a Python pyodbc example to execute the query.


Let me know if you encounter any errors while running this in DB2!















Your queries appear to be written in MS Access SQL and need to be translated into IBM Db2 SQL for proper execution. Below is a breakdown of each query along with an explanation and its equivalent Db2 SQL.


---

1️⃣ Creating a Table with Aggregated Data

MS Access Query:

SELECT 
    Count([Dorrie A Asset].ASSET_NBR) AS CountOfASSET_NBR, 
    [Dorrie A Asset].COMPANY_NM, 
    [Dorrie A Asset].COMP_OWN_CD, 
    [Dorrie A Asset].ACCT_PLAN_ID, 
    [Dorrie A Asset].CONTRACT_BAL, 
    [Dorrie A Asset].TOTAL_RENT, 
    [Dorrie A Asset].COST_CENTER_CD AS [AU Number], 
    [Dorrie A Asset].BRANCH_CO_NBR 
INTO [Dorrie A Asset2]
FROM [Dorrie A Asset]
GROUP BY 
    [Dorrie A Asset].CUSTOMER_NBR, 
    [Dorrie A Asset].CONTRACT_ID, 
    [Dorrie A Asset].COMPANY_NM, 
    [Dorrie A Asset].COMP_OWN_CD, 
    [Dorrie A Asset].ACCT_PLAN_ID, 
    [Dorrie A Asset].CONTRACT_BAL, 
    [Dorrie A Asset].TOTAL_RENT, 
    [Dorrie A Asset].COST_CENTER_CD, 
    [Dorrie A Asset].BRANCH_CO_NBR;

Db2 Equivalent:

CREATE TABLE "Dorrie_A_Asset2" AS 
(
    SELECT 
        COUNT("ASSET_NBR") AS CountOfASSET_NBR, 
        "COMPANY_NM", 
        "COMP_OWN_CD", 
        "ACCT_PLAN_ID", 
        "CONTRACT_BAL", 
        "TOTAL_RENT", 
        "COST_CENTER_CD" AS "AU Number", 
        "BRANCH_CO_NBR"
    FROM "Dorrie_A_Asset"
    GROUP BY 
        "CUSTOMER_NBR", 
        "CONTRACT_ID", 
        "COMPANY_NM", 
        "COMP_OWN_CD", 
        "ACCT_PLAN_ID", 
        "CONTRACT_BAL", 
        "TOTAL_RENT", 
        "COST_CENTER_CD", 
        "BRANCH_CO_NBR"
) WITH NO DATA;

INSERT INTO "Dorrie_A_Asset2" 
SELECT 
    COUNT("ASSET_NBR"), 
    "COMPANY_NM", 
    "COMP_OWN_CD", 
    "ACCT_PLAN_ID", 
    "CONTRACT_BAL", 
    "TOTAL_RENT", 
    "COST_CENTER_CD", 
    "BRANCH_CO_NBR"
FROM "Dorrie_A_Asset"
GROUP BY 
    "CUSTOMER_NBR", 
    "CONTRACT_ID", 
    "COMPANY_NM", 
    "COMP_OWN_CD", 
    "ACCT_PLAN_ID", 
    "CONTRACT_BAL", 
    "TOTAL_RENT", 
    "COST_CENTER_CD", 
    "BRANCH_CO_NBR";


---

2️⃣ Updating AU Number Based on Conditions

MS Access Query:

UPDATE [Dorrie A Asset2] 
SET [AU Number] = "0" 
WHERE [BRANCH_CO_NBR] = "70";

Db2 Equivalent:

UPDATE "Dorrie_A_Asset2" 
SET "AU Number" = '0' 
WHERE "BRANCH_CO_NBR" = '70';

MS Access Query:

UPDATE [Dorrie A Asset2] 
SET [AU Number] = "No AU Nbr" 
WHERE [BRANCH_CO_NBR] IN ("55", "60", "65", "66", "67", "80", "85", "90");

Db2 Equivalent:

UPDATE "Dorrie_A_Asset2" 
SET "AU Number" = 'No AU Nbr' 
WHERE "BRANCH_CO_NBR" IN ('55', '60', '65', '66', '67', '80', '85', '90');


---

3️⃣ Creating Another Aggregated Table

MS Access Query:

SELECT 
    First([Dorrie A Asset2].ACCT_PLAN_ID) AS FirstOfACCT_PLAN_ID, 
    [Dorrie A Asset2].CUSTOMER_NBR, 
    [Dorrie A Asset2].COMP_OWN_CD, 
    [Dorrie A Asset2].COMPANY_NM, 
    Count([Dorrie A Asset2].CONTRACT_ID) AS CountOfCONTRACT_ID, 
    Sum([Dorrie A Asset2].CountOfASSET_NBR) AS SumOfCountOfASSET_NBR, 
    Sum([Dorrie A Asset2].CONTRACT_BAL) AS SumOfCONTRACT_BAL, 
    Sum([Dorrie A Asset2].TOTAL_RENT) AS SumOfTOTAL_RENT 
INTO [Dorrie A Asset3]
FROM [Dorrie A Asset2]
GROUP BY 
    [Dorrie A Asset2].CUSTOMER_NBR, 
    [Dorrie A Asset2].COMP_OWN_CD, 
    [Dorrie A Asset2].COMPANY_NM
ORDER BY First([Dorrie A Asset2].ACCT_PLAN_ID);

Db2 Equivalent:

CREATE TABLE "Dorrie_A_Asset3" AS 
(
    SELECT 
        MIN("ACCT_PLAN_ID") AS FirstOfACCT_PLAN_ID, 
        "CUSTOMER_NBR", 
        "COMP_OWN_CD", 
        "COMPANY_NM", 
        COUNT("CONTRACT_ID") AS CountOfCONTRACT_ID, 
        SUM("CountOfASSET_NBR") AS SumOfCountOfASSET_NBR, 
        SUM("CONTRACT_BAL") AS SumOfCONTRACT_BAL, 
        SUM("TOTAL_RENT") AS SumOfTOTAL_RENT 
    FROM "Dorrie_A_Asset2"
    GROUP BY "CUSTOMER_NBR", "COMP_OWN_CD", "COMPANY_NM"
) WITH NO DATA;

INSERT INTO "Dorrie_A_Asset3" 
SELECT 
    MIN("ACCT_PLAN_ID"), 
    "CUSTOMER_NBR", 
    "COMP_OWN_CD", 
    "COMPANY_NM", 
    COUNT("CONTRACT_ID"), 
    SUM("CountOfASSET_NBR"), 
    SUM("CONTRACT_BAL"), 
    SUM("TOTAL_RENT")
FROM "Dorrie_A_Asset2"
GROUP BY "CUSTOMER_NBR", "COMP_OWN_CD", "COMPANY_NM";


---

4️⃣ Updating Company Names

MS Access Query:

UPDATE [Dorrie A Asset3] 
SET [COMPANY_NM] = "RICOH" 
WHERE [COMP_OWN_CD] = "IKON";

Db2 Equivalent:

UPDATE "Dorrie_A_Asset3" 
SET "COMPANY_NM" = 'RICOH' 
WHERE "COMP_OWN_CD" = 'IKON';

MS Access Query:

UPDATE [Dorrie A Asset3] 
SET [COMPANY_NM] = "WELLS FARGO" 
WHERE [COMP_OWN_CD] = "IFS";

Db2 Equivalent:

UPDATE "Dorrie_A_Asset3" 
SET "COMPANY_NM" = 'WELLS FARGO' 
WHERE "COMP_OWN_CD" = 'IFS';


---

5️⃣ Inserting Final Aggregated Data

MS Access Query:

INSERT INTO Counts 
    ([report ran], COMPANY_NM, FirstOfACCT_PLAN_ID, [# Customers], [# Contracts], [# Assets], [$ GRI])
SELECT 
    Now() AS [report ran], 
    [Dorrie A Asset3].COMPANY_NM, 
    [Dorrie A Asset3].FirstOfACCT_PLAN_ID, 
    Count([Dorrie A Asset3].CUSTOMER_NBR) AS [# Customers], 
    Sum([Dorrie A Asset3].CountOfCONTRACT_ID) AS [# Contracts], 
    Sum([Dorrie A Asset3].SumOfCountOfASSET_NBR) AS [# Assets], 
    Sum([Dorrie A Asset3].SumOfTOTAL_RENT) AS SumOfSumOfTOTAL_RENT
FROM [Dorrie A Asset3]
GROUP BY Now(), [Dorrie A Asset3].COMPANY_NM, [Dorrie A Asset3].FirstOfACCT_PLAN_ID
ORDER BY [Dorrie A Asset3].COMPANY_NM, [Dorrie A Asset3].FirstOfACCT_PLAN_ID;

Db2 Equivalent:

INSERT INTO "Counts" 
    ("report_ran", "COMPANY_NM", "FirstOfACCT_PLAN_ID", "# Customers", "# Contracts", "# Assets", "$ GRI")
SELECT 
    CURRENT_TIMESTAMP AS "report_ran", 
    "COMPANY_NM", 
    "FirstOfACCT_PLAN_ID", 
    COUNT("CUSTOMER_NBR"), 
    SUM("CountOfCONTRACT_ID"), 
    SUM("SumOfCountOfASSET_NBR"), 
    SUM("SumOfTOTAL_RENT")
FROM "Dorrie_A_Asset3"
GROUP BY CURRENT_TIMESTAMP, "COMPANY_NM", "FirstOfACCT_PLAN_ID";

Would you like this in a Python script? 🚀




Since you don't have write access, you can use Common Table Expressions (CTEs) or Derived Tables (Subqueries) instead of temporary tables to structure your query.

Approach:

1. Use a CTE (WITH statement) to create a temporary result set in memory.


2. Use a subquery (SELECT ... FROM (...) AS subquery) if CTEs aren't supported in your environment.




---

Solution Using a CTE

Try modifying your query to use a CTE instead of inserting into a table:

WITH ASSET_DATA AS (
    SELECT 
        RIMTHAI_ASSET.CUSTOMER_NBR,
        RIMTHAI_ASSET.CONTRACT_ID,
        RIMTHAI_ASSET.ASSET_NBR,
        RIMTHAI_COMPANY.COMPANY_NBR,
        RIMTHAI_COMPANY.COMP_COMP_CD,
        RIMTHAI_CONTRACT.ACCT_PLAN_ID,
        RIMTHAI_CONTRACT.CONTRACT_BAL,
        RIMTHAI_CONTRACT.TOTAL_RENT,
        RIMTHAI_COMPANY.COST_CENTER_CD,
        RIMTHAI_CONTRACT.BRANCH_CO_NBR
    FROM 
        RIMTHAI_CONTRACT
    INNER JOIN RIMTHAI_COMPANY
        ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
    INNER JOIN RIMTHAI_ASSET
        ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID
        AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
    WHERE 
        RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A'
        AND RIMTHAI_ASSET.ASSET_STATUS = 'A'
)
SELECT * FROM ASSET_DATA;


---

Alternative Using a Derived Table (Subquery)

If CTEs are not supported, use a subquery instead:

SELECT * FROM (
    SELECT 
        RIMTHAI_ASSET.CUSTOMER_NBR,
        RIMTHAI_ASSET.CONTRACT_ID,
        RIMTHAI_ASSET.ASSET_NBR,
        RIMTHAI_COMPANY.COMPANY_NBR,
        RIMTHAI_COMPANY.COMP_COMP_CD,
        RIMTHAI_CONTRACT.ACCT_PLAN_ID,
        RIMTHAI_CONTRACT.CONTRACT_BAL,
        RIMTHAI_CONTRACT.TOTAL_RENT,
        RIMTHAI_COMPANY.COST_CENTER_CD,
        RIMTHAI_CONTRACT.BRANCH_CO_NBR
    FROM 
        RIMTHAI_CONTRACT
    INNER JOIN RIMTHAI_COMPANY
        ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
    INNER JOIN RIMTHAI_ASSET
        ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID
        AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
    WHERE 
        RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A'
        AND RIMTHAI_ASSET.ASSET_STATUS = 'A'
) AS ASSET_DATA;


---

Why This Works

CTEs (WITH statement) allow you to store the query result in memory and use it multiple times in the main query.

Derived Tables (Subqueries) let you use the result directly in a SELECT statement without creating a physical table.


This should allow you to proceed without needing write access. Let me know if you need further modifications!




Since you don't have write access, you can use Common Table Expressions (CTEs) or Derived Tables (Subqueries) instead of temporary tables to structure your query.

Approach:

1. Use a CTE (WITH statement) to create a temporary result set in memory.


2. Use a subquery (SELECT ... FROM (...) AS subquery) if CTEs aren't supported in your environment.




---

Solution Using a CTE

Try modifying your query to use a CTE instead of inserting into a table:

WITH ASSET_DATA AS (
    SELECT 
        RIMTHAI_ASSET.CUSTOMER_NBR,
        RIMTHAI_ASSET.CONTRACT_ID,
        RIMTHAI_ASSET.ASSET_NBR,
        RIMTHAI_COMPANY.COMPANY_NBR,
        RIMTHAI_COMPANY.COMP_COMP_CD,
        RIMTHAI_CONTRACT.ACCT_PLAN_ID,
        RIMTHAI_CONTRACT.CONTRACT_BAL,
        RIMTHAI_CONTRACT.TOTAL_RENT,
        RIMTHAI_COMPANY.COST_CENTER_CD,
        RIMTHAI_CONTRACT.BRANCH_CO_NBR
    FROM 
        RIMTHAI_CONTRACT
    INNER JOIN RIMTHAI_COMPANY
        ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
    INNER JOIN RIMTHAI_ASSET
        ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID
        AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
    WHERE 
        RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A'
        AND RIMTHAI_ASSET.ASSET_STATUS = 'A'
)
SELECT * FROM ASSET_DATA;


---

Alternative Using a Derived Table (Subquery)

If CTEs are not supported, use a subquery instead:

SELECT * FROM (
    SELECT 
        RIMTHAI_ASSET.CUSTOMER_NBR,
        RIMTHAI_ASSET.CONTRACT_ID,
        RIMTHAI_ASSET.ASSET_NBR,
        RIMTHAI_COMPANY.COMPANY_NBR,
        RIMTHAI_COMPANY.COMP_COMP_CD,
        RIMTHAI_CONTRACT.ACCT_PLAN_ID,
        RIMTHAI_CONTRACT.CONTRACT_BAL,
        RIMTHAI_CONTRACT.TOTAL_RENT,
        RIMTHAI_COMPANY.COST_CENTER_CD,
        RIMTHAI_CONTRACT.BRANCH_CO_NBR
    FROM 
        RIMTHAI_CONTRACT
    INNER JOIN RIMTHAI_COMPANY
        ON RIMTHAI_CONTRACT.BRANCH_CO_NBR = RIMTHAI_COMPANY.COMPANY_NBR
    INNER JOIN RIMTHAI_ASSET
        ON RIMTHAI_CONTRACT.CONTRACT_ID = RIMTHAI_ASSET.CONTRACT_ID
        AND RIMTHAI_CONTRACT.CUSTOMER_NBR = RIMTHAI_ASSET.CUSTOMER_NBR
    WHERE 
        RIMTHAI_CONTRACT.CONTRACT_STATUS = 'A'
        AND RIMTHAI_ASSET.ASSET_STATUS = 'A'
) AS ASSET_DATA;


---

Why This Works

CTEs (WITH statement) allow you to store the query result in memory and use it multiple times in the main query.

Derived Tables (Subqueries) let you use the result directly in a SELECT statement without creating a physical table.


This should allow you to proceed without needing write access. Let me know if you need further modifications!






The MS Access queries you shared involve multiple operations, including:

1. Creating temporary tables (SELECT ... INTO)


2. Aggregations (GROUP BY, COUNT, SUM)


3. Conditional updates (UPDATE ... SET)


4. Inserts (INSERT INTO ... SELECT)


5. Ordering and filtering (ORDER BY, WHERE)



Since you don't have write access to the IBM DB2 database, I will rewrite these queries using pandasql (for SQL-like operations on Pandas DataFrames) and sqlite3 (for temporary in-memory databases).


---

Python Equivalent Implementation

import pandas as pd
import pandasql as psql
import sqlite3

# Create a temporary SQLite database in memory
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()

# Simulated data loading from DB2 (replace this with actual pyodbc queries)
# Assuming these DataFrames are fetched from IBM DB2:
rimthai_contract = pd.DataFrame([...])  # Replace with actual data
rimthai_company = pd.DataFrame([...])
rimtha1_asset = pd.DataFrame([...])

# Load DataFrames into SQLite
rimthai_contract.to_sql("RIMTHAI_CONTRACT", conn, index=False, if_exists="replace")
rimthai_company.to_sql("RIMTHAI_COMPANY", conn, index=False, if_exists="replace")
rimtha1_asset.to_sql("RIMTHA1_ASSET", conn, index=False, if_exists="replace")

# 1. Creating the first temporary table (Dorrie_A_Asset)
query_1 = """
CREATE TEMP TABLE Dorrie_A_Asset AS 
SELECT 
    A.CUSTOMER_NBR, 
    A.CONTRACT_ID, 
    A.ASSET_NBR, 
    B.COMPANY_NM, 
    B.COMP_OWN_CD, 
    C.ACCT_PLAN_ID, 
    C.CONTRACT_BAL, 
    C.TOTAL_RENT, 
    B.COST_CENTER_CD, 
    C.BRANCH_CO_NBR
FROM RIMTHAI_CONTRACT C
INNER JOIN RIMTHAI_COMPANY B ON C.BRANCH_CO_NBR = B.COMPANY_NBR
INNER JOIN RIMTHA1_ASSET A ON C.CONTRACT_ID = A.CONTRACT_ID 
                            AND C.CUSTOMER_NBR = A.CUSTOMER_NBR
WHERE C.CONTRACT_STATUS = 'A' AND A.ASSET_STATUS = 'A';
"""
cursor.execute(query_1)

# 2. Aggregation and creating another temporary table
query_2 = """
CREATE TEMP TABLE Dorrie_A_Asset2 AS
SELECT 
    CUSTOMER_NBR, 
    CONTRACT_ID, 
    COUNT(ASSET_NBR) AS CountOfASSET_NBR, 
    COMPANY_NM, 
    COMP_OWN_CD, 
    ACCT_PLAN_ID, 
    CONTRACT_BAL, 
    TOTAL_RENT, 
    COST_CENTER_CD AS JAU_Number, 
    BRANCH_CO_NBR
FROM Dorrie_A_Asset
GROUP BY CUSTOMER_NBR, CONTRACT_ID, COMPANY_NM, COMP_OWN_CD, ACCT_PLAN_ID, CONTRACT_BAL, TOTAL_RENT, COST_CENTER_CD, BRANCH_CO_NBR;
"""
cursor.execute(query_2)

# 3. Updating values based on conditions
cursor.execute("""
UPDATE Dorrie_A_Asset2 
SET JAU_Number = '0' 
WHERE BRANCH_CO_NBR = '70';
""")

cursor.execute("""
UPDATE Dorrie_A_Asset2 
SET JAU_Number = 'No AU Nbr' 
WHERE BRANCH_CO_NBR IN ('55', '60', '65', '66', '67', '80', '85', '90');
""")

# 4. Aggregation and inserting into another table
query_3 = """
CREATE TEMP TABLE Dorrie_A_Asset3 AS 
SELECT 
    FIRST(ACCT_PLAN_ID) AS FirstOfACCT_PLAN_ID,
    CUSTOMER_NBR, 
    COMP_OWN_CD, 
    COMPANY_NM, 
    COUNT(CONTRACT_ID) AS CountOfCONTRACT_ID, 
    SUM(CountOfASSET_NBR) AS SumOfCountOfASSET_NBR, 
    SUM(CONTRACT_BAL) AS SumOfCONTRACT_BAL, 
    SUM(TOTAL_RENT) AS SumOfTOTAL_RENT
FROM Dorrie_A_Asset2
GROUP BY CUSTOMER_NBR, COMP_OWN_CD, COMPANY_NM
ORDER BY FirstOfACCT_PLAN_ID;
"""
cursor.execute(query_3)

# 5. Updating values based on COMP_OWN_CD
cursor.execute("""
UPDATE Dorrie_A_Asset3 
SET COMPANY_NM = 'RICOH' 
WHERE COMP_OWN_CD = 'IKON';
""")

cursor.execute("""
UPDATE Dorrie_A_Asset3 
SET COMPANY_NM = 'WELLS FARGO' 
WHERE COMP_OWN_CD = 'IFS';
""")

# 6. Final insertion into Counts table
query_4 = """
CREATE TEMP TABLE Counts AS 
SELECT 
    datetime('now') AS report_ran,
    COMPANY_NM, 
    FirstOfACCT_PLAN_ID, 
    COUNT(CUSTOMER_NBR) AS "# Customers", 
    SUM(CountOfCONTRACT_ID) AS "# Contracts", 
    SUM(SumOfCountOfASSET_NBR) AS "# Assets", 
    SUM(SumOfTOTAL_RENT) AS "SumOfSumOfTOTAL_RENT"
FROM Dorrie_A_Asset3
GROUP BY COMPANY_NM, FirstOfACCT_PLAN_ID
ORDER BY COMPANY_NM, FirstOfACCT_PLAN_ID;
"""
cursor.execute(query_4)

# 7. Retrieving the final report
query_5 = """
SELECT 
    report_ran, 
    COMPANY_NM, 
    FirstOfACCT_PLAN_ID, 
    "# Customers", 
    "# Contracts", 
    "# Assets", 
    SumOfSumOfTOTAL_RENT
FROM Counts
ORDER BY report_ran DESC, COMPANY_NM, FirstOfACCT_PLAN_ID;
"""

# Fetch results and convert to Pandas DataFrame
final_report = pd.read_sql_query(query_5, conn)

# Display the results
import ace_tools as tools
tools.display_dataframe_to_user(name="Final Report", dataframe=final_report)

# Close the connection
conn.close()


---

Key Adjustments from MS Access to Python

1. Using sqlite3 for managing temporary tables since you can't write to IBM DB2.


2. Rewriting SELECT INTO as CREATE TEMP TABLE ... AS SELECT ... in SQLite.


3. Handling UPDATE statements correctly for conditions.


4. Replacing First() aggregation with FIRST_VALUE() where applicable.


5. Using datetime('now') in SQLite instead of Now() in Access for timestamp generation.



Let me know if you need further modifications or explanations!




Below is one way to “translate” your MS Access query into a DB2‑friendly SQL statement and show you how to use it in Python with pyodbc. Note that I had to make some assumptions/corrections because the original query contains a few typos and unusual syntax (for example, using “–” instead of “=” and mixed table prefixes like “RIMTHA1” and “RIMTHAI”). In the rewritten query, I’ve assumed that:

• All objects come from the same schema (here, RIMTHA1)
• The join on ASSET is meant to equate CONTRACT_ID and CUSTOMER_NBR
• Column names with spaces (e.g. “COMPANY NM”) have been renamed with underscores (e.g. COMPANY_NM)
• The “INTO [Dorrie A Asset]” clause (which in Access creates a new table) is omitted since you only have read access; later, we can store the results in a temporary SQLite table if needed

The rewritten SQL might look like this:

SELECT 
    A.CUSTOMER_NBR,
    A.CONTRACT_ID,
    A.ASSET_NBR,
    C.COMPANY_NM,
    C.COMP_OWN_CD,
    CT.ACCT_PLAN_ID,
    CT.CONTRACT_BAL,
    CT.TOTAL_RENT,
    C.COST_CENTER_CD,
    CT.BRANCH_CO_NBR
FROM RIMTHA1.CONTRACT AS CT
JOIN RIMTHA1.COMPANY AS C 
    ON CT.BRANCH_CO_NBR = C.COMPANY_NBR
JOIN RIMTHA1.ASSET AS A 
    ON CT.CONTRACT_ID = A.CONTRACT_ID 
   AND CT.CUSTOMER_NBR = A.CUSTOMER_NBR
WHERE CT.CONTRACT_STATUS = 'A' 
  AND A.ASSET_STATUS = 'A'
GROUP BY 
    A.CUSTOMER_NBR, 
    A.CONTRACT_ID, 
    A.ASSET_NBR, 
    C.COMPANY_NM, 
    C.COMP_OWN_CD, 
    CT.ACCT_PLAN_ID, 
    CT.CONTRACT_BAL, 
    CT.TOTAL_RENT, 
    C.COST_CENTER_CD, 
    CT.BRANCH_CO_NBR;

Below is an example Python snippet that connects to your IBM DB2 database using pyodbc, runs the query, loads the results into a pandas DataFrame, and then (if needed) writes that DataFrame to a temporary SQLite table so you can reuse the data for further SQL queries without write access to DB2:


---

import pyodbc
import pandas as pd
import sqlite3

# Connect to IBM DB2 (fill in your connection details)
conn_db2 = pyodbc.connect(
    "DRIVER={IBM DB2 ODBC DRIVER};"
    "DATABASE=your_db_name;"
    "HOSTNAME=your_host;"
    "PORT=your_port;"
    "PROTOCOL=TCPIP;"
    "UID=your_username;"
    "PWD=your_password;"
)

# Define the DB2 SQL query
sql_query = """
SELECT 
    A.CUSTOMER_NBR,
    A.CONTRACT_ID,
    A.ASSET_NBR,
    C.COMPANY_NM,
    C.COMP_OWN_CD,
    CT.ACCT_PLAN_ID,
    CT.CONTRACT_BAL,
    CT.TOTAL_RENT,
    C.COST_CENTER_CD,
    CT.BRANCH_CO_NBR
FROM RIMTHA1.CONTRACT AS CT
JOIN RIMTHA1.COMPANY AS C 
    ON CT.BRANCH_CO_NBR = C.COMPANY_NBR
JOIN RIMTHA1.ASSET AS A 
    ON CT.CONTRACT_ID = A.CONTRACT_ID 
   AND CT.CUSTOMER_NBR = A.CUSTOMER_NBR
WHERE CT.CONTRACT_STATUS = 'A' 
  AND A.ASSET_STATUS = 'A'
GROUP BY 
    A.CUSTOMER_NBR, 
    A.CONTRACT_ID, 
    A.ASSET_NBR, 
    C.COMPANY_NM, 
    C.COMP_OWN_CD, 
    CT.ACCT_PLAN_ID, 
    CT.CONTRACT_BAL, 
    CT.TOTAL_RENT, 
    C.COST_CENTER_CD, 
    CT.BRANCH_CO_NBR;
"""

# Execute the query and load into a pandas DataFrame
df = pd.read_sql(sql_query, conn_db2)
conn_db2.close()

# Optional: Create a temporary SQLite table from the DataFrame
conn_sqlite = sqlite3.connect(':memory:')  # In-memory SQLite DB
df.to_sql('Dorrie_A_Asset', conn_sqlite, index=False, if_exists='replace')

# Now you can reuse the table 'Dorrie_A_Asset' in subsequent SQL queries via sqlite3 or pandasql.
# For example, using sqlite3:
cursor = conn_sqlite.cursor()
cursor.execute("SELECT * FROM Dorrie_A_Asset LIMIT 5;")
print(cursor.fetchall())

conn_sqlite.close()


---

Key Points:

1. Rewriting the Query:
– I replaced the Access‑specific “INTO [Dorrie A Asset]” clause with a plain SELECT (since you only have read access).
– I corrected the join conditions so that the ASSET table joins on both CONTRACT_ID and CUSTOMER_NBR.
– I assumed that the “–” symbols in the original query were meant to be “=” operators.


2. Temporary Storage:
– Since you can’t write back to DB2, you can load the result into a pandas DataFrame and then use the DataFrame’s to_sql method to create a temporary SQLite table (in memory).
– Once the table is in SQLite, you can run additional queries against it using either the sqlite3 module or pandasql, reusing as much SQL as possible.



Feel free to adjust the connection strings and column names as necessary for your environment. Let me know if you need further modifications or have additional queries to translate!




Below is an example of how you can convert your MS Access query into a SQLite‑compatible SQL statement and then run it to create a new temporary table from an existing one. In MS Access you used an “INTO” clause, but in SQLite you can achieve the same result using the CREATE TABLE … AS SELECT … syntax.

Assuming your original table is named Dorrie_A_Asset with columns such as:

• CUSTOMER_NBR
• CONTRACT_ID
• ASSET_NBR
• COMPANY_NM
• COMP_OWN_CO
• ACCT_PLAN_ID
• CONTRACT_BAL
• TOTAL_RENT
• COST_CENTER_CD
• BRANCH_CO_NBR

A corrected and SQLite‑adapted version of your query would be:

CREATE TABLE Dorrie_A_Asset2 AS
SELECT 
    CUSTOMER_NBR, 
    CONTRACT_ID, 
    COUNT(ASSET_NBR) AS CountOfASSET_NBR,
    COMPANY_NM, 
    COMP_OWN_CO, 
    ACCT_PLAN_ID, 
    CONTRACT_BAL, 
    TOTAL_RENT, 
    COST_CENTER_CD AS "AU Number",
    BRANCH_CO_NBR
FROM Dorrie_A_Asset
GROUP BY 
    CUSTOMER_NBR,
    CONTRACT_ID,
    COMPANY_NM,
    COMP_OWN_CO,
    ACCT_PLAN_ID,
    CONTRACT_BAL,
    TOTAL_RENT,
    COST_CENTER_CD,
    BRANCH_CO_NBR;

Below is a complete Python snippet using sqlite3 to execute the above query on your SQLite temporary database and then display a few rows from the new table:

import sqlite3

# Connect to your SQLite in-memory database or an existing one.
conn_sqlite = sqlite3.connect(":memory:")
cursor = conn_sqlite.cursor()

# (For demonstration purposes, let's assume Dorrie_A_Asset already exists.
#  In your real use-case, this table should have been created/populated earlier.)

# --- Execute the query to create the new table ---
create_table_query = """
CREATE TABLE Dorrie_A_Asset2 AS
SELECT 
    CUSTOMER_NBR, 
    CONTRACT_ID, 
    COUNT(ASSET_NBR) AS CountOfASSET_NBR,
    COMPANY_NM, 
    COMP_OWN_CO, 
    ACCT_PLAN_ID, 
    CONTRACT_BAL, 
    TOTAL_RENT, 
    COST_CENTER_CD AS "AU Number",
    BRANCH_CO_NBR
FROM Dorrie_A_Asset
GROUP BY 
    CUSTOMER_NBR,
    CONTRACT_ID,
    COMPANY_NM,
    COMP_OWN_CO,
    ACCT_PLAN_ID,
    CONTRACT_BAL,
    TOTAL_RENT,
    COST_CENTER_CD,
    BRANCH_CO_NBR;
"""

cursor.execute(create_table_query)
conn_sqlite.commit()

# --- Query the newly created table and print 5 rows ---
cursor.execute("SELECT * FROM Dorrie_A_Asset2 LIMIT 5;")
rows = cursor.fetchall()
print(rows)

# Close the connection if done
conn_sqlite.close()

Explanation

1. SQLite CREATE TABLE AS SELECT:
Instead of using the MS Access “INTO” clause, SQLite uses CREATE TABLE table_name AS SELECT … to create a new table from query results.


2. COUNT and GROUP BY:
The COUNT(ASSET_NBR) aggregation is applied, and the GROUP BY clause includes all the non-aggregated columns.


3. Alias for Column:
The alias "AU Number" is assigned to COST_CENTER_CD. In SQLite, if a column name contains spaces, you can enclose it in double quotes.


4. Python Execution:
The code snippet demonstrates connecting to the SQLite database, executing the query to create the new table, and then retrieving and printing 5 rows from that new table.



Adjust the table and column names as needed for your actual schema.


Below is a complete Python solution that rewrites your MS Access update/aggregate queries into SQLite‑compatible SQL and runs them on a temporary SQLite database. In this example, we assume that the table Dorrie_A_Asset2 already exists in SQLite (populated from your earlier steps) and that you’ll create new tables Dorrie_A_Asset3 and Counts from it.

For clarity, note the following changes compared to your original MS Access syntax:

• In SQLite you use double quotes (or no quoting if names are simple) for identifiers with spaces.
• Instead of the MS Access “INTO” clause, we use “CREATE TABLE … AS SELECT …” for making a new table.
• SQLite does not have a built‑in First() aggregate; we use MIN() to simulate “first” for ACCT_PLAN_ID. (Adjust if needed.)
• The Now() function is replaced by SQLite’s datetime('now').
• The UPDATE syntax has been fixed and multiple OR conditions are replaced with an IN clause where appropriate.

Below is the full Python code:


---

import sqlite3

# Connect to an in‑memory SQLite database (or use a file if desired)
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()

# --------------------------
# Assume Dorrie_A_Asset2 exists.
# For demonstration, you might create and populate it.
# Example creation (adjust types and sample data as needed):
cursor.execute("""
CREATE TABLE Dorrie_A_Asset2 (
    CUSTOMER_NBR TEXT,
    CONTRACT_ID TEXT,
    ASSET_NBR INTEGER,
    COMPANY_NM TEXT,
    COMP_OWN_CD TEXT,
    ACCT_PLAN_ID TEXT,
    CONTRACT_BAL REAL,
    TOTAL_RENT REAL,
    "AU Number" TEXT,
    BRANCH_CO_NBR TEXT
)
""")
# (Optional) Insert sample data into Dorrie_A_Asset2 here...
# conn.commit()

# --------------------------
# 1. Update "AU Number" to "0" where BRANCH_CO_NBR is "70"
update_query1 = '''
UPDATE Dorrie_A_Asset2 
SET "AU Number" = '0'
WHERE BRANCH_CO_NBR = '70';
'''
cursor.execute(update_query1)

# 2. Update "AU Number" to "No AU Nar" where BRANCH_CO_NBR is in a list of values.
update_query2 = '''
UPDATE Dorrie_A_Asset2 
SET "AU Number" = 'No AU Nar'
WHERE BRANCH_CO_NBR IN ('55','60','65','66','67','80','85','90');
'''
cursor.execute(update_query2)
conn.commit()

# --------------------------
# 3. Create Dorrie_A_Asset3 as an aggregate table from Dorrie_A_Asset2.
# Using CREATE TABLE AS SELECT. We simulate First(ACCT_PLAN_ID) with MIN(ACCT_PLAN_ID).
create_table_query = '''
CREATE TABLE Dorrie_A_Asset3 AS
SELECT 
    MIN(ACCT_PLAN_ID) AS FirstOfACCT_PLAN_ID,
    CUSTOMER_NBR,
    COMP_OWN_CD,
    COMPANY_NM,
    COUNT(CONTRACT_ID) AS CountOfCONTRACT_ID,
    SUM("CountOfASSET_NBR") AS SumOfCountOfASSET_NBR,  -- assumes Dorrie_A_Asset2 has this column from a previous aggregation
    SUM(CONTRACT_BAL) AS SumOfCONTRACT_BAL,
    SUM(TOTAL_RENT) AS SumOfTOTAL_RENT
FROM Dorrie_A_Asset2
GROUP BY 
    CUSTOMER_NBR,
    COMP_OWN_CD,
    COMPANY_NM;
'''
# Note: If Dorrie_A_Asset2 does not have a column CountOfASSET_NBR,
# you may need to compute COUNT(ASSET_NBR) in a subquery.
cursor.execute(create_table_query)
conn.commit()

# --------------------------
# 4. Update Dorrie_A_Asset3 COMPANY_NM based on COMP_OWN_CD values.
update_query3 = '''
UPDATE Dorrie_A_Asset3 
SET COMPANY_NM = 'RICOH'
WHERE COMP_OWN_CD = 'IKON';
'''
cursor.execute(update_query3)

update_query4 = '''
UPDATE Dorrie_A_Asset3 
SET COMPANY_NM = 'WELLS FARGO'
WHERE COMP_OWN_CD = 'IFS';
'''
cursor.execute(update_query4)
conn.commit()

# --------------------------
# 5. Create the Counts table.
# First, create Counts with the desired schema.
cursor.execute("""
CREATE TABLE Counts (
    "report ran" TEXT,
    COMPANY_NM TEXT,
    FirstOfACCT_PLAN_ID TEXT,
    "# Customers" INTEGER,
    "# Contracts" INTEGER,
    "# Assets" INTEGER,
    "S GR" REAL
)
""")
conn.commit()

# 6. Insert aggregated data into Counts.
insert_query = '''
INSERT INTO Counts ("report ran", COMPANY_NM, FirstOfACCT_PLAN_ID, "# Customers", "# Contracts", "# Assets", "S GR")
SELECT 
    datetime('now') AS "report ran",
    COMPANY_NM,
    FirstOfACCT_PLAN_ID,
    COUNT(CUSTOMER_NBR) AS "# Customers",
    SUM(CountOfCONTRACT_ID) AS "# Contracts",
    SUM(SumOfCountOfASSET_NBR) AS "# Assets",
    SUM(SumOfTOTAL_RENT) AS "S GR"
FROM Dorrie_A_Asset3
GROUP BY COMPANY_NM, FirstOfACCT_PLAN_ID;
'''
cursor.execute(insert_query)
conn.commit()

# --------------------------
# 7. Retrieve and print results from the Counts table.
select_query = '''
SELECT "report ran", COMPANY_NM, FirstOfACCT_PLAN_ID, "# Customers", "# Contracts", "# Assets", "S GR"
FROM Counts
ORDER BY "report ran" DESC, COMPANY_NM, FirstOfACCT_PLAN_ID;
'''
cursor.execute(select_query)
results = cursor.fetchall()

# Print the results
for row in results:
    print(row)

# Close the connection when done.
conn.close()


---

Explanation

1. Update Queries:
• The first update sets "AU Number" to '0' where BRANCH_CO_NBR equals '70'.
• The second update sets "AU Number" to 'No AU Nar' when BRANCH_CO_NBR is one of several values (using an IN clause).


2. Creating an Aggregated Table (Dorrie_A_Asset3):
We use CREATE TABLE ... AS SELECT to build a new table aggregating data from Dorrie_A_Asset2. In this example, MIN() is used to simulate the “First” value of ACCT_PLAN_ID.


3. Further Updates on Dorrie_A_Asset3:
Two updates adjust COMPANY_NM based on different COMP_OWN_CD values.


4. Counts Table:
We create the Counts table with columns matching your target schema and then insert aggregated results using datetime('now') for the report timestamp.
The SELECT aggregates customer counts, sums of contracts, assets, and total rent.


5. Result Retrieval:
Finally, we select and print data from the Counts table.



Adjust table names, column names, and aggregation details as needed to match your real schema and requirements.



