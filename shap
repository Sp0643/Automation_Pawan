from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import matplotlib.pyplot as plt

model = RandomForestClassifier()
model.fit(X_train_prepared, y_train_prepared)

importances = model.feature_importances_
features = pd.Series(importances, index=X_train_prepared.columns)
features.sort_values(ascending=False).plot(kind='bar')
plt.title("Feature Importance")
plt.show()

import shap
import lime.lime_tabular
shap.initjs()

explainer_shap = shap.LinearExplainer(clf, X_train_prepared)
shap_values = explainer_shap.shap_values(X_test_prepared)
shap.summary_plot(shap_values, X_test_prepared)

explainer_lime = lime.lime_tabular.LimeTabularExplainer(
    X_train_prepared.values,
    feature_names=X_train_prepared.columns,
    class_names=clf.classes_.astype(str).tolist(),
    discretize_continuous=True
)
sample = 0
exp = explainer_lime.explain_instance(
    X_test_prepared.iloc[sample].values,
    clf.predict_proba,
    num_features=10
)
exp.as_pyplot_figure()




Here is the only the new part you need to add to your existing code to include the predicted label (Met / Not Met) along with the probability of prediction:

df_result = X_test_prepared.copy()
df_result['Predicted_Label'] = clf.predict(X_test_prepared)
df_result['Probability_Not_Met'] = clf.predict_proba(X_test_prepared)[:, 0]
df_result['Probability_Met'] = clf.predict_proba(X_test_prepared)[:, 1]

This will give you a DataFrame df_result with:

all test features,

predicted class (Predicted_Label), and

probability for both classes.


Let me know if you want to export this to Excel or filter top uncertain predictions.

