Here’s a complete Python markdown version you can copy-paste directly into your Jupyter notebook to teach or reference all basic pandas.Series functions.


---

# 📘 Basic Functions in pandas.Series

## 📊 Structure & Type

```python
import pandas as pd

s = pd.Series([10, 20, 30, 40, 50], index=['a', 'b', 'c', 'd', 'e'])

type(s)          # Check type
len(s)           # Number of elements
s.shape          # Shape of the series
s.dtype          # Data type of the values
s.index          # Index labels
s.values         # Underlying numpy array


---

🔍 Data Inspection

s.head()         # First 5 elements
s.tail()         # Last 5 elements
s.sample(2)      # Random 2 elements
s.unique()       # Unique values
s.nunique()      # Number of unique values
s.value_counts() # Frequency count of values


---

📈 Statistical Summary

s.sum()          # Sum of values
s.mean()         # Mean (average)
s.median()       # Median value
s.mode()         # Most frequent value(s)
s.std()          # Standard deviation
s.min()          # Minimum value
s.max()          # Maximum value
s.describe()     # Statistical summary


---

🔤 Sorting & Indexing

s.sort_values()        # Sort by values
s.sort_index()         # Sort by index
s.reindex(['c', 'a', 'e', 'b', 'd'])  # Change order of index
s.reset_index()        # Reset index (returns DataFrame)


---

📌 Accessing Values

s['a']                 # Access by label
s[0]                   # Access by position
s.loc['b']             # Access by label using .loc
s.iloc[2]              # Access by position using .iloc


---

🔧 Data Transformation

s.apply(lambda x: x * 2)           # Apply a function
s.map({10: 100, 20: 200})          # Map using dictionary
s.replace(30, 300)                 # Replace value
s.astype(float)                    # Change data type


---

🧵 String Operations (only for string Series)

s_str = pd.Series(["apple", "banana", "cherry"])

s_str.str.upper()      # Convert to uppercase
s_str.str.contains('a')# Check for substring
s_str.str.len()        # Length of each string

---

Let me know if you want an exportable `.ipynb` notebook or want to add quiz/exercises with these!




# 📘 Basic Functions in pandas.Series

## 📊 Structure & Type
- **`type()`**: Returns the type of the Series object.
- **`len()`**: Returns the number of elements in the Series.
- **`.shape`**: Returns a tuple indicating the number of elements.
- **`.dtype`**: Returns the data type of the Series values.
- **`.index`**: Returns the index (labels) of the Series.
- **`.values`**: Returns the underlying NumPy array of values.

---

## 🔍 Data Inspection
- **`.head(n)`**: Returns the first `n` elements of the Series.
- **`.tail(n)`**: Returns the last `n` elements.
- **`.sample(n)`**: Returns a random sample of `n` elements.
- **`.unique()`**: Returns the unique values in the Series.
- **`.nunique()`**: Returns the number of unique elements.
- **`.value_counts()`**: Returns counts of unique values.

---

## 📈 Statistical Summary
- **`.sum()`**: Computes the sum of all elements.
- **`.mean()`**: Returns the average of the values.
- **`.median()`**: Returns the median value.
- **`.mode()`**: Returns the most frequent value(s).
- **`.std()`**: Returns the standard deviation.
- **`.min()`**: Returns the smallest value.
- **`.max()`**: Returns the largest value.
- **`.describe()`**: Generates summary statistics.

---

## 🔤 Sorting & Indexing
- **`.sort_values()`**: Sorts the Series by values.
- **`.sort_index()`**: Sorts the Series by index.
- **`.reindex()`**: Reorders the Series using a new index.
- **`.reset_index()`**: Resets the index, turning it into a column.

---

## 📌 Accessing Values
- **`[]`**: Access by label or position.
- **`.loc[]`**: Access by label.
- **`.iloc[]`**: Access by integer position.

---

## 🔧 Data Transformation
- **`.apply()`**: Applies a function to each element.
- **`.map()`**: Maps values using a function or dictionary.
- **`.replace()`**: Replaces values in the Series.
- **`.astype()`**: Converts Series to a specified data type.

---

## 🧵 String Operations (for object/string type)
- **`.str.upper()`**: Converts strings to uppercase.
- **`.str.contains()`**: Checks if each string contains a pattern.
- **`.str.len()`**: Computes the length of each string.




Certainly! Here's a single Python markdown block you can paste into a Jupyter Notebook Markdown cell. It contains clear and organized definitions of key pandas.Series functions, without code examples—perfect for learning or teaching:


---

# 📘 Basic Functions in pandas.Series

## 📊 Structure & Type
- **`type()`**: Returns the type of the Series object.
- **`len()`**: Returns the number of elements in the Series.
- **`.shape`**: Returns a tuple indicating the number of elements.
- **`.dtype`**: Returns the data type of the Series values.
- **`.index`**: Returns the index (labels) of the Series.
- **`.values`**: Returns the underlying NumPy array of values.

---

## 🔍 Data Inspection
- **`.head(n)`**: Returns the first `n` elements of the Series.
- **`.tail(n)`**: Returns the last `n` elements.
- **`.sample(n)`**: Returns a random sample of `n` elements.
- **`.unique()`**: Returns the unique values in the Series.
- **`.nunique()`**: Returns the number of unique elements.
- **`.value_counts()`**: Returns counts of unique values.

---

## 📈 Statistical Summary
- **`.sum()`**: Computes the sum of all elements.
- **`.mean()`**: Returns the average of the values.
- **`.median()`**: Returns the median value.
- **`.mode()`**: Returns the most frequent value(s).
- **`.std()`**: Returns the standard deviation.
- **`.min()`**: Returns the smallest value.
- **`.max()`**: Returns the largest value.
- **`.describe()`**: Generates summary statistics.

---

## 🔤 Sorting & Indexing
- **`.sort_values()`**: Sorts the Series by values.
- **`.sort_index()`**: Sorts the Series by index.
- **`.reindex()`**: Reorders the Series using a new index.
- **`.reset_index()`**: Resets the index, turning it into a column.

---

## 📌 Accessing Values
- **`[]`**: Access by label or position.
- **`.loc[]`**: Access by label.
- **`.iloc[]`**: Access by integer position.

---

## 🔧 Data Transformation
- **`.apply()`**: Applies a function to each element.
- **`.map()`**: Maps values using a function or dictionary.
- **`.replace()`**: Replaces values in the Series.
- **`.astype()`**: Converts Series to a specified data type.

---

## 🧵 String Operations (for object/string type)
- **`.str.upper()`**: Converts strings to uppercase.
- **`.str.contains()`**: Checks if each string contains a pattern.
- **`.str.len()`**: Computes the length of each string.


---

Let me know if you'd like a version with icons or emojis for better visual cues, or a companion code block version for hands-on practice.

