Hi there!

I'm happy to help you build your quiz app in PowerApps with the features you've described. Below is a detailed step-by-step approach, along with code snippets, to guide you through the process.


---

Overview

You want to:

1. Capture the release date and time, which should default to the current date and time.


2. Set the active duration for how long the quiz should be available.


3. Notify users in different time zones simultaneously when the quiz is released.


4. Store this information in a SharePoint (SP) list.


5. Display notifications to users when they open the app.




---

Step 1: Set Up the Admin Interface

1. Add a DatePicker Control

Control Name: dpReleaseDate

Purpose: Allows the admin to select the release date.

Default Value: Set to Today() to default to the current date.


2. Create a Custom TimePicker Control

Since there's no built-in TimePicker, we'll create one using dropdowns.

Hour Dropdown

Control Name: ddReleaseHour

Items Property: ["00", "01", ..., "23"] (24-hour format)

Default Selected Value: Set to Text(Hour(Now()), "00")


Minute Dropdown

Control Name: ddReleaseMinute

Items Property: ["00", "15", "30", "45"] or ["00"..."59"]

Default Selected Value: Set to Text(Minute(Now()), "00")



3. Input for Active Duration

Control Name: txtActiveDuration

Control Type: Text Input (Number mode)

Purpose: Admin specifies how many hours the quiz should be active.

Default Value: Could be set to a standard duration like 1.


4. Submit Button

Control Name: btnSubmitQuiz

Purpose: Saves the quiz release information to the SP list.



---

Step 2: Capture and Store Release Date and Time

OnSelect Property of btnSubmitQuiz:

// Step 2.1: Combine Date and Time into a single DateTime value
Set(
    varReleaseDateTimeLocal,
    DateAdd(
        DateAdd(dpReleaseDate.SelectedDate, Value(ddReleaseHour.Selected.Value), Hours),
        Value(ddReleaseMinute.Selected.Value),
        Minutes
    )
);

// Step 2.2: Convert Local DateTime to UTC
Set(
    varReleaseDateTimeUTC,
    DateAdd(varReleaseDateTimeLocal, -TimeZoneOffset(), Minutes)
);

// Step 2.3: Capture the Active Duration
Set(
    varActiveDurationHours,
    Value(txtActiveDuration.Text)
);

// Step 2.4: Store the information in the SharePoint list
Patch(
    QuizList, // Replace with your SP list name
    Defaults(QuizList),
    {
        Title: "Quiz Title", // Adjust as necessary
        ReleaseDateTimeUTC: varReleaseDateTimeUTC,
        ActiveDurationHours: varActiveDurationHours
    }
);

// Step 2.5: Provide confirmation to the admin
Notify("Quiz has been scheduled successfully!", NotificationType.Success);

Explanation:

varReleaseDateTimeLocal: Combines selected date and time.

TimeZoneOffset(): Returns the offset in minutes between the user's local time zone and UTC.

varReleaseDateTimeUTC: Converts local time to UTC for consistent storage.

Patch Function: Saves data to the SP list with fields:

Title

ReleaseDateTimeUTC

ActiveDurationHours




---

Step 3: Notify Users When They Open the App

OnStart Property of the App or OnVisible Property of the Main Screen:

// Step 3.1: Retrieve active quizzes from the SP list
ClearCollect(
    colActiveQuizzes,
    Filter(
        QuizList,
        ReleaseDateTimeUTC <= Now(),
        DateAdd(ReleaseDateTimeUTC, ActiveDurationHours, Hours) >= Now()
    )
);

// Step 3.2: If there's an active quiz, notify the user
If(
    CountRows(colActiveQuizzes) > 0,
    Notify("A new quiz is available! Please participate.", NotificationType.Success)
);

Explanation:

Now(): Returns the current UTC DateTime.

colActiveQuizzes: A collection of quizzes that are currently active.

Notify Function: Alerts the user if there's an active quiz.



---

Step 4: Adjust for User Time Zones (If Displaying Local Times)

If you need to display the quiz release time in the user's local time zone:

// For each quiz in colActiveQuizzes
ForAll(
    colActiveQuizzes,
    Collect(
        colQuizzesWithLocalTime,
        {
            Title: Title,
            ReleaseDateTimeLocal: DateAdd(ReleaseDateTimeUTC, TimeZoneOffset(), Minutes),
            ActiveDurationHours: ActiveDurationHours
        }
    )
);

Explanation:

DateAdd with TimeZoneOffset(): Converts UTC time to the user's local time.



---

Step 5: Create the Quiz Interface

This step involves creating the quiz questions and interface, which can be customized as needed.

Quiz Screen: Design a screen to display quiz questions.

Submit Answers Button: Collects and stores user responses.



---

Step 6: Additional Considerations

6.1: SharePoint List Setup

Ensure your SharePoint list (QuizList) has the following columns:

Title: Single line of text.

ReleaseDateTimeUTC: Date and Time (set to display as UTC).

ActiveDurationHours: Number.


6.2: Validations

Add validations to prevent incorrect data entry.

Release Date and Time Validation:

If(
    varReleaseDateTimeLocal < Now(),
    Notify("Release date and time cannot be in the past.", NotificationType.Error);
    Exit()
);

Active Duration Validation:

If(
    varActiveDurationHours <= 0,
    Notify("Active duration must be greater than zero.", NotificationType.Error);
    Exit()
);


6.3: User Permissions

Ensure users have the necessary permissions to read from the SharePoint list.

Use appropriate security roles to restrict access to admin functions.



---

Step 7: Testing

Admin Testing:

Schedule a quiz and verify that it's stored correctly in the SP list.

Check that the release DateTime is stored in UTC.


User Testing:

Open the app as a user in different time zones.

Verify that the notification appears when the quiz is active.

Ensure that the quiz deactivates after the specified duration.




---

Summary

By following these steps, you will:

Capture the release date and time, defaulting to 'now' if needed.

Allow the admin to set the active duration for the quiz.

Notify all users simultaneously, regardless of their time zones.

Store and retrieve quiz information from a SharePoint list.

Provide a seamless experience for users when they open the app.



---

Feel free to ask if you need further clarification or assistance with any part of this implementation. Good luck with your quiz app!


Here’s a step-by-step approach to build your quiz app in PowerApps, capturing release date and time correctly across time zones, and storing it in SharePoint. This will ensure that the quiz notifications are displayed at the correct time for all users, regardless of their time zone.


---

Solution Overview

1. User Inputs: Use DatePicker and a custom TimePicker to select the release date and time.


2. Storing Date and Time: Convert selected values to UTC before storing them in a SharePoint list.


3. Fetching and Displaying the Quiz Notification: Convert the UTC time back to the user’s local time when displayed.


4. Managing Active Period: Capture the number of hours for the quiz to remain active and trigger notifications accordingly.


5. Notification Logic: Notify all users based on their local time zones.




---

Step-by-Step Implementation

1. Designing the Input Interface (PowerApps)

DatePicker for Release Date:

Insert a DatePicker from the new modern controls.

Name it dpReleaseDate to capture the release date.


Custom TimePicker for Release Time:

Use Dropdowns or Sliders to capture the hour and minute.

Name them ddlHour and ddlMinute respectively.



Input for Quiz Active Duration (in Hours):

Add a Slider or Dropdown to capture how long the quiz will remain active.

Name this input ddlActiveDuration.




---

2. Capturing and Storing Date and Time in SharePoint List

Concatenate Date and Time as UTC:


// Convert to UTC DateTime
Set(
   varReleaseDateTimeUTC,
   DateAdd(
      DateTimeValue(
         Text(dpReleaseDate.SelectedDate) & " " & 
         Text(Value(ddlHour.Selected.Value), "[$-en-US]00") & ":" & 
         Text(Value(ddlMinute.Selected.Value), "[$-en-US]00")
      ),
      TimeZoneOffset(),
      Minutes
   )
);

// Store in SharePoint List
Patch(
   'QuizReleaseList',
   Defaults('QuizReleaseList'),
   {
       Title: "Quiz 1",
       ReleaseDateTimeUTC: varReleaseDateTimeUTC,
       ActiveDurationHours: Value(ddlActiveDuration.Selected.Value)
   }
);

Explanation:

dpReleaseDate.SelectedDate: Fetches the selected date.

ddlHour.Selected.Value and ddlMinute.Selected.Value: Fetch the hour and minute.

DateAdd(..., TimeZoneOffset(), Minutes): Adjusts the time to UTC before storing in SharePoint.

Patch: Saves the data to SharePoint.




---

3. Retrieving and Displaying Notifications Based on Time Zones

Fetch Data from SharePoint:


ClearCollect(
   colQuizData,
   'QuizReleaseList'
);

Convert UTC Time to User’s Local Time:


ForAll(
   colQuizData,
   Collect(
       colQuizDisplay,
       {
           QuizTitle: ThisRecord.Title,
           ReleaseTimeLocal: DateAdd(ThisRecord.ReleaseDateTimeUTC, -TimeZoneOffset(), Minutes),
           ExpiryTimeLocal: DateAdd(ThisRecord.ReleaseDateTimeUTC, ThisRecord.ActiveDurationHours * 60, Minutes)
       }
   )
);

Explanation:

DateAdd(ThisRecord.ReleaseDateTimeUTC, -TimeZoneOffset(), Minutes): Converts UTC time back to local time.

ExpiryTimeLocal: Adds the active duration to the release time.




---

4. Notification Logic in PowerApps

Display Notification for Ongoing Quizzes:


If(
   Now() >= ThisRecord.ReleaseTimeLocal && Now() <= ThisRecord.ExpiryTimeLocal,
   Notify("A new quiz is available: " & ThisRecord.QuizTitle, NotificationType.Information)
);

Explanation:

This checks if the current time (Now()) is within the release and expiry window to trigger the notification.




---

5. Additional Considerations

Handling Multiple Time Zones: Since all the calculations are done in UTC and converted to local time dynamically, all users will see the quiz at the correct time in their respective time zones.

Testing: Test with different time zones to ensure the conversion logic is correct.

SharePoint List Structure: Ensure the SharePoint list includes columns like:

Title (Text): Name of the quiz

ReleaseDateTimeUTC (DateTime): Stores the UTC release date and time

ActiveDurationHours (Number): Stores the active period duration




---

Summary Workflow

1. Admin selects the release date, time, and active duration.


2. The release date and time are adjusted to UTC and stored in SharePoint.


3. When users open the app, the stored UTC time is converted to their local time.


4. The quiz notification is displayed if the quiz is active based on the user’s time zone.




---

This design ensures that the quiz notification works across multiple time zones and provides a seamless experience for all users.



Here’s the modified formula to include the time-based logic at the beginning. This logic ensures that the user can only proceed if the current time (Now()) is within the ReleaseTime and EndTime range from the PKTReleaseDetails list.

Final Formula with Time Logic:

If(
    // Check if the current time is within the ReleaseTime and EndTime
    Now() >= First(Filter(PKTReleaseDetails, Kid = currentKid)).ReleaseTime &&
    Now() <= First(Filter(PKTReleaseDetails, Kid = currentKid)).EndTime,

    // Proceed with Quiz Attempt Check
    If(
        !IsBlank(First(Filter(QuizResponsePKT, Kid = currentKid))),
        // Notify the user if they have already taken the quiz
        Notify(
            "You have already attempted the quiz.",
            NotificationType.Warning
        ),

        // Check if User Exists in User Data
        If(
            !IsBlank(First(Filter(USERDATAPKT, Kid = currentKid))),
            // Navigate to Instruction Page if the user exists
            Navigate(InstructionPage, ScreenTransition.None),

            // Notify the user if not found
            Notify(
                "User not found. Please contact your Administrator for access assistance.",
                NotificationType.Warning
            )
        )
    ),

    // Notify if the current time is outside the allowed window
    Notify(
        "The attempt window for the quiz is closed.",
        NotificationType.Error
    )
)


---

Explanation:

1. Time Logic:

The outer If checks if the current time (Now()) is within the ReleaseTime and EndTime from the PKTReleaseDetails list.

If the condition is true, it moves to the next If block to check if the user has already taken the quiz.

If false, it displays a notification: "The attempt window for the quiz is closed."



2. Quiz Attempt Check:

If the user has already taken the quiz, it shows a warning notification: "You have already attempted the quiz."



3. User Data Check:

If the user exists in USERDATAPKT, it navigates to the InstructionPage.

If the user is not found, it shows a warning notification: "User not found. Please contact your Administrator for access assistance."





---

This formula ensures that the time-based logic is executed first, followed by the quiz attempt check and user validation, with appropriate notifications at each step.

To combine the date from a DatePicker and time from Now() into a string and patch it into a SharePoint list, follow these steps:

Steps:

1. Extract the Date from the DatePicker


2. Extract the Time using Now()


3. Format both as strings


4. Concatenate them


5. Patch to SharePoint List



Example Code:

// Step 1: Extract Date from DatePicker (e.g., DatePicker1)
Set(varSelectedDate, DateValue(DatePicker1.SelectedDate));

// Step 2: Extract Current Time in 12-hour format
Set(varCurrentTime, Text(Now(), "hh:mm tt"));

// Step 3: Combine Date and Time as a String
Set(varDateTimeString, 
    Text(varSelectedDate, "yyyy-MM-dd") & " " & varCurrentTime
);

// Step 4: Patch to SharePoint List
Patch(
    'YourSharePointList',
    Defaults('YourSharePointList'),
    {
        Title: "New Entry",  // Example field
        CombinedDateTime: varDateTimeString  // Storing the combined string
    }
);

Explanation:

1. DateValue(DatePicker1.SelectedDate) extracts only the date from the DatePicker.


2. Text(Now(), "hh:mm tt") formats the current time in 12-hour format.


3. Text(varSelectedDate, "yyyy-MM-dd") converts the date into a string (you can change the format as needed).


4. Concatenation: The date and time are joined with " " (space) in between.


5. Patch() updates the SharePoint list with the combined date and time string.



Example Output:

"2024-10-28 03:45 PM"


This approach ensures that both date and time are properly formatted and stored as a string in the SharePoint list. Adjust field names as per your SharePoint setup.




